Hi Naomi. Below is what we think is a pretty straight-forward problem, which nonetheless offers an opportunity to show off your coding skill. Let's pretend that this is going to be production code that's going to be deployed in a mission-critical system. 

Let me know what you think, and have fun at Whitney. I'd be envious, but I'm flying out to Cape Cod tomorrow :)

I'm going to only be on-line sporadically next week, so I'm adding Nithin to this thread. He really likes this problem. 

alex

Change Maker

Implement a class named ChangeMaker that takes a list of coin denominations in the constructor:

>>> cm = ChangeMaker([25, 10, 5, 1])
In ChangeMaker, write two functions called change() and count_change(), each of which takes as an argument the amount to be changed. The first function, change(), returns the combinations of the coins that can be used to sum up to the amount:

>>> cm.change(8)
[[5, 1, 1, 1], [1, 1, 1, 1, 1, 1, 1, 1]]
With the coin denominations 25, 10, 5, and 1, the amount 8 can be made up of one 5 and three 1's, or eight 1's. There are only two ways to make up an amount of 8 with those denominations. Order does not matter in the results, so [5, 1, 1, 1] and [1, 5, 1, 1] are not two different combinations.

If the amount given can not be made using the denominations, return an empty list []:

>>> cm = ChangeMaker([25, 10, 5])
>>> cm.change(8)
[]
The second function, count_change(), returns only the number of such combinations:

>>> cm = ChangeMaker([25, 10, 5, 1])
>>> cm.count_change(8)
2
>>> cm = ChangeMaker([25, 10, 5])
>>> cm.count_change(8)
0
The solution should be generalized to work with any denominations of coins (i.e., not typical currency denominations):

>>> cm = ChangeMaker([2, 1])
>>> cm.change(3)
[[2, 1], [1, 1, 1]]
>>> cm.count_change(3)
2
>>> cm.change(4)
[[2, 2], [2, 1, 1], [1, 1, 1, 1]]
>>> cm.count_change(4)
3
Assume that the ChangeMaker class will always be given lists of positive integers without any repeated elements, and also assume that the amount to be changed will always be an integer >= 0. Attempt to provide as efficient a solution as possible, and discuss the time and space complexity.

Please put up the code on your GitHub account and provide a README on how to run your program along with the time and space complexity discussion mentioned above.

Also, please write this in Python 2.7, if possible -- we are part of the 98% that use it. ;)

Thanks! We really look forward to seeing what you come up with.

Also, please feel free to ask me any questions.
